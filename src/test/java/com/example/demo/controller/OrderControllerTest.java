package com.example.demo.controller;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.model.dto.orderDetails.OrderDetailsCreationDTO;
import com.example.demo.model.orm.OrderDetails;
import com.example.demo.model.orm.Product;
import com.example.demo.model.orm.Order;
import com.example.demo.model.orm.User;
import com.example.demo.repository.OrderDetailsRepository;
import com.example.demo.repository.OrderRepository;
import com.example.demo.repository.ProductRepository;
import com.example.demo.repository.UserRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@TestInstance(Lifecycle.PER_CLASS)
@AutoConfigureMockMvc
public class OrderControllerTest {
	@Autowired
	MockMvc mockMvc;
	
	@Autowired
	private ObjectMapper objectMapper;
	
	@Autowired
	private OrderRepository orderRepository;
	@Autowired
	private OrderDetailsRepository orderDetailsRepository;
	@Autowired
	private ProductRepository productRepository;
	@Autowired
	private UserRepository userRepository;
	
	private static User testUser;
	private static User testAdmin;
	private static User testSuperAdmin;
	private static User testHeadOfDepartment;
    private static Product testProduct1;
    private static Product testProduct2;
    private static String orderNum = "TEST-ORD-01";
	
	@BeforeAll
    public static void init(@Autowired UserRepository userRepository, 
                            @Autowired ProductRepository productRepository,
                            @Autowired OrderRepository orderRepository, 
                            @Autowired OrderDetailsRepository orderDetailsRepository) {
        // Create a users
		

        createUsers(userRepository);
		
        createProducts(productRepository);
        
        createOrderForTestUser(orderRepository, orderDetailsRepository);

    }
	
    @AfterEach
    public void tearDown() {
    	orderDetailsRepository.deleteAllInBatch();
        orderRepository.deleteAllInBatch();
        userRepository.deleteAllInBatch();
        productRepository.deleteAllInBatch();
    }

	private static void createProducts(ProductRepository productRepository) {
		// Create two valid products
        testProduct1 = new Product(
        	    null,             // id will be generated by the database
        	    "Premium Blouse", // productName
        	    29.99,           // price
        	    "Red",           // color
        	    100,             // stockQuantity
        	    "Premium Material.", // description
        	    new Date()
        	);
        testProduct2 = new Product(
        	    null,             // id will be generated by the database
        	    "Premium suit", // productName
        	    29.99,           // price
        	    "Black",           // color
        	    70,             // stockQuantity
        	    "Premium Material.", // description
        	    new Date()
        	);        
        testProduct1 = productRepository.save(testProduct1);
        testProduct2 = productRepository.save(testProduct2);
	}

	private static void createUsers(UserRepository userRepository) {
	    testUser = createAndSaveUser(userRepository, "John", "Doe", 4L);
	    testHeadOfDepartment = createAndSaveUser(userRepository, "John", "Doe", 1L);
	    testSuperAdmin = createAndSaveUser(userRepository, "John", "Doe", 2L);
	    testAdmin = createAndSaveUser(userRepository, "John", "Doe", 3L);
	}

	private static User createAndSaveUser(UserRepository userRepository, String firstName, String lastName, Long roleId) {
	    User user = new User(
	        firstName,              // firstName
	        lastName,               // lastName
	        roleId,                 // roleId
	        "password123",          // password
	        "john.doe@example.com", // email
	        "123 Main St",          // address
	        "555-1234",             // phone
	        "American",             // nationality
	        "Male",                 // gender
	        new Date(),             // registrationDate
	        new Date()              // birthday
	    );
	    return userRepository.save(user);
	}
	
	private static void createOrderForTestUser(OrderRepository orderRepository, OrderDetailsRepository orderDetailsRepository) {
	    // Create a list of product IDs and their corresponding quantities
	    List<Long> productIds = Arrays.asList(testProduct1.getId(), testProduct2.getId());
	    List<Integer> quantities = Arrays.asList(1, 2);

	    // Create and save the order
	    Order order = new Order();
	    order.setUserId(testUser.getId());
	    order.setOrderNumber(orderNum);
	    order.setTransactionDate(new Date());
	    order = orderRepository.save(order);

	    // Create and save order details
	    for (int i = 0; i < productIds.size(); i++) {
	        orderDetailsRepository.save(new OrderDetails(0L,order.getId(), productIds.get(i), quantities.get(i)));
	    }
	}

    @AfterAll
    @Transactional
    public static void destroy(@Autowired UserRepository userRepository, 
            @Autowired ProductRepository productRepository,
            @Autowired OrderRepository orderRepository, 
            @Autowired OrderDetailsRepository orderDetailsRepository) {
        // Clean up the created user and products
        if (testUser != null) {
        	List<Order> orders = orderRepository.findByUserId(testUser.getId());
            
            // Delete order details associated with each order
            for (Order order : orders) {
                orderDetailsRepository.deleteAll(orderDetailsRepository.findByOrderId(order.getId()));
                orderRepository.delete(order);
            }
            userRepository.delete(testUser);
            userRepository.delete(testAdmin);
            userRepository.delete(testSuperAdmin);
            userRepository.delete(testHeadOfDepartment);
        }
        if (testProduct1 != null) {
            productRepository.delete(testProduct1);
        }
        if (testProduct2 != null) {
            productRepository.delete(testProduct2);
        }
    }

    @Test
    public void createValidOrderTest() {
    	Long userId = testUser.getId();
        List<OrderDetailsCreationDTO> dtoList = createOrderDetails();
        
        try {
            mockMvc.perform(post("/api/v1/orders/createOrder")
                    .param("userId", Long.toString(userId))
                    .contentType("application/json")
                    .content(objectMapper.writeValueAsString(dtoList)))
                  .andExpect(status().isCreated());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

	private List<OrderDetailsCreationDTO> createOrderDetails() {
		Long[] productIds = {testProduct1.getId(), testProduct2.getId()};
        int[] quantity = {2, 3};
        List<OrderDetailsCreationDTO> dtoList = new ArrayList<>();
        dtoList.add(new OrderDetailsCreationDTO(productIds[0], quantity[0]));
        dtoList.add(new OrderDetailsCreationDTO(productIds[1], quantity[1]));
		return dtoList;
	}

	
	@Test
	public void createOrderWithInvalidUserIdTest() {
		int userId = 5;
        List<OrderDetailsCreationDTO> dtoList = createOrderDetails();
		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Integer.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount==updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} 
		
	}
	@Test
	public void createOrderWithInvalidProductIdTest() {
		Long userId = testUser.getId();
		Long[] productIds = {1L,2L};
		int[] quantity = {2,3};
		List<OrderDetailsCreationDTO> dtoList = createInvalidOrderDetail(productIds,quantity);
		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Long.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount==updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	private List<OrderDetailsCreationDTO> createInvalidOrderDetail(Long[] productIds, int[] quantity) {
		List<OrderDetailsCreationDTO> dtoList = new ArrayList<>();
		OrderDetailsCreationDTO order1 = new OrderDetailsCreationDTO(productIds[0],quantity[0]);
		OrderDetailsCreationDTO order2 = new OrderDetailsCreationDTO(productIds[1],quantity[1]);
		dtoList.add(order1);
		dtoList.add(order2);
		return dtoList;
	}
	
	@Test
	public void createOrderWithLargeProductQuantityTest() {
		Long[] productIds = {17L,21L};
		int[] quantity = {150,170};
		Long userId = testUser.getId();
		List<OrderDetailsCreationDTO> dtoList = createInvalidOrderDetail(productIds,quantity);
		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Long.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount == updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void createOrderWithNegativeOrZeroProductQuantityTest() {
		Long[] productIds = {testProduct1.getId(), testProduct2.getId()};
		int[] quantity = {0,-1};
		Long userId = testUser.getId();
		List<OrderDetailsCreationDTO> dtoList = createInvalidOrderDetail(productIds,quantity);
		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Long.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount == updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	@Test
	public void createOrderWithNoOrderDetailsTest() {
		Long userId = testUser.getId();
		List<OrderDetailsCreationDTO> dtoList = new ArrayList<>();
		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Long.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount == updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void createOrderWithHeadOfDepartmentTest() {
		Long userId = testHeadOfDepartment.getId();
        List<OrderDetailsCreationDTO> dtoList = createOrderDetails();
		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Long.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount == updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void createOrderWithSuperAdminTest() {
		Long userId = testSuperAdmin.getId();
        List<OrderDetailsCreationDTO> dtoList = createOrderDetails();

		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Long.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount == updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void createOrderWithAdminTest() {
		Long userId = testAdmin.getId();
        List<OrderDetailsCreationDTO> dtoList = createOrderDetails();
		int ordersCount = orderRepository.findAll().size();
		try {
			
			mockMvc.perform(post("/api/v1/orders/createOrder")
					.param("userId", Long.toString(userId))
			        .contentType("application/json")
			        .content(objectMapper.writeValueAsString(dtoList)))
			      .andExpect(status().isBadRequest());
			int updatedOrdersCount = orderRepository.findAll().size();
			assertTrue(ordersCount == updatedOrdersCount);
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void getOrderDetailsByValidOrderNumTest() {
		try {
			mockMvc.perform(get("/api/v1/orders/getOrderDetailsByOrderNum")
					.param("orderNumber", orderNum))
			      .andExpect(status().isOk());
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void getOrderDetailsByInvalidOrderNumTest() {
		String invalidOrderNum = "TEST-INVALID-ORD01";
		try {
			mockMvc.perform(get("/api/v1/orders/getOrderDetailsByOrderNum")
					.param("orderNumber", invalidOrderNum))
			      .andExpect(status().isBadRequest());
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void getOrderDetailsByValidUserIdTest() {
		Long userId = testUser.getId();
		try {
			mockMvc.perform(get("/api/v1/orders/getOrderDetailsByUserId")
					.param("userId", Long.toString(userId)))
			      .andExpect(status().isOk());
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	@Test
	public void getOrderDetailsByInvalidUserIdTest() {
		int invalidUserId = 5;
		try {
			mockMvc.perform(get("/api/v1/orders/getOrderDetailsByUserId")
					.param("userId", Integer.toString(invalidUserId)))
			      .andExpect(status().isBadRequest());
			
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
